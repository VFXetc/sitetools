#!python

import argparse
import os
from subprocess import call, check_call

import fiadmin.tools
from sitetools.sites import Site, find_dev_sites


parser = argparse.ArgumentParser()
parser.add_argument('--all', action='store_true')
parser.add_argument('name', nargs='*')
args = parser.parse_args()


def get_dev_site(create=True):

    dev_sites = find_dev_sites()
    dev_venvs = [s for s in dev_sites if s.is_venv]

    if len(dev_venvs) > 1:
        print 'Multiple development virtualenvs found:'
        for i, site in enumerate(dev_venvs):
            print '%d) %s' % (i + 1, site.prefix)
        index = int(raw_input('Which to use? [1]: ').strip() or '1')
        return dev_sites[dev_venvs[index - 1]]

    elif not dev_venvs:
        if create:

            # The `dev` command will interactively create venvs for us.
            ret = call(['dev', 'true'])
            if ret:
                exit(ret)

            # Try again, but don't call dev again.
            return get_dev_site(create=False)

        else:
            print 'Could not find development virtualenv.'
            exit(1)

    else:
        return dev_venvs[0]


dev_site = get_dev_site()
tool_dir = os.path.dirname(os.path.abspath(dev_site.prefix))
pip = dev_site.which('pip')


names = [tool[0] for tool in fiadmin.tools.TOOLS] if args.all else args.name
for name in names:

    repo = dict(fiadmin.tools.TOOLS).get(name)
    if not repo:
        print 'Tool %r is unknown.' % name
        exit(1)

    tool_path = os.path.join(tool_dir, name)

    if not os.path.exists(tool_path):
        check_call(['git', 'clone', repo, name], cwd=tool_dir)

    if os.path.exists(os.path.join(tool_path, 'setup.py')):
        check_call([pip, 'install', '-e', tool_path])

