#!/usr/bin/env python
"""Executes the given command with a modified path and KS_PYTHON_SITES.

E.g.:

    dev python -> Runs standard Python but imports from local key_tools.
    dev maya2011 -> Runs Maya2011 but with the local key_tools.

This still relies upon whichever sitecustomize that is within the PYTHONPATH to
bootstrap the Python sys.path with KS_PYTHON_SITES. This script still depends
upon the PATH to contain directories within the production tools in order to
hook them.

"""


import itertools
import os
import optparse
import pwd
import re
import sys


def unique(input_):
    seen = set()
    output = []
    for x in input_:
        if x not in seen:
            seen.add(x)
            output.append(x)
    return output

def expand_venv(base):
    return os.path.join(base, 'lib', 'python%x.%x' % sys.version_info[:2], 'site-packages')

def environ_list(name):
    existing = os.environ.get(name)
    return existing.split(':') if existing is not None else []


optparser = optparse.OptionParser(
    usage="usage: %prog [options] command [argument ...]"
)
optparser.add_option(
    '-e', '--export',
    dest="export", action="store_true", default=False,
    help="print the changes to the environment",
)
optparser.add_option(
    '-n', '--no-site',
    dest='no_site', action='store_true', default=False,
    help='do not modify the python path',
)
optparser.add_option(
    '-s', '--site',
    dest="sites", action="append", default=[],
    help="directory to use as the development $KS_TOOLS",
)
optparser.add_option(
    '--venv',
    dest='venvs', action='append', default=[],
    help='virtual environment to inherit packages from',
)
optparser.add_option(
    '-b', '--base',
    dest='bases', action='append', default=[],
    help='directories that if on the $PATH should be transformed into new sites',
)
optparser.add_option(
    '-u', '--user',
    dest="users", action="append",
    help="user whose dev environment to inherit; overriden by --site",
)
optparser.add_option(
    '--list-sites',
    dest="list_sites", action="store_true", default=False,
    help="list the development environments we would have used (colon delimited)"
)
optparser.add_option(
    '--bootstrap',
    dest="bootstrap", action="store_true", default=False,
    help="bootstrap a previous environment from $KS_DEV_ARGS",
)
optparser.add_option(
    '-v', '--verbose',
    dest="verbose", action="count",
    help="request verbose behaviour from scripts; sets $KS_VERBOSE; twice for very verbose",
)
optparser.add_option(
    '-l', '--log',
    dest='log_levels', action="append",
    help="set Python logging levels for modules; e.g.: 'sgfs:DEBUG' or ':INFO'",
)
optparser.disable_interspersed_args()
opts, args = optparser.parse_args()


if opts.bootstrap:
    opts, _ = optparser.parse_args([x for x in os.environ.get('KS_DEV_ARGS', '').split() if x])


# Should we inherit, or start a clean environment?
if opts.export:
    environ = {}
else:
    environ = os.environ.copy()


# Store the original flags as provided so that --bootstrap can pick it back up.
# Can't just use -len(args) because -0 won't do what we want.
bootstrap = sys.argv[1:len(sys.argv) - len(args)]
bootstrap = os.environ.get('KS_DEV_ARGS', '').split() + bootstrap
environ['KS_DEV_ARGS'] = ' '.join(x for x in bootstrap if x and x not in ('-e', '--export', '-b', '--bootstrap'))


# Set the debug flag.
if opts.verbose:
    environ['KS_VERBOSE'] = str(opts.verbose)


# Pass the logging levels on to sitecustomize.
if opts.log_levels:
    environ['KS_LOG_LEVELS'] = ','.join(x.strip() for x in opts.log_levels)



site_patterns = os.environ.get('KS_DEV_SITES', '~/fi/dev:~/dev').split(':')
venv_patterns = os.environ.get('KS_DEV_VENVS', '~/fi/dev/venv:~/dev/venv').split(':')

# Determine which new sites to add.

new_sites = opts.sites[:]
new_venvs = opts.venvs[:]

# Go exploring if there wasn't anything explicit.
if not new_sites and not new_venvs:

    def expanduser(path, user=None):
        """Roughly the same as os.path.expanduser, but you can pass a default user."""

        def _replace(m):
            m_user = m.group(1) or user
            return pwd.getpwnam(m_user).pw_dir if m_user else pwd.getpwuid(os.getuid()).pw_dir

        return re.sub(r'~(\w*)', _replace, path)

    # Autodetect local sites.
    users = opts.users or [None]

    new_sites = [expanduser(pattern, user).strip() for user in users for pattern in site_patterns]
    new_sites = [x for x in new_sites if x and os.path.exists(x)]

    new_venvs = [expanduser(pattern, user).strip() for user in users for pattern in venv_patterns]
    new_venvs = [x for x in new_venvs if os.path.exists(expand_venv(x))]


# Make sure that a development environment exists.
if not new_sites and not new_venvs and not opts.no_site:
    print 'Could not find suitable development directory. Please make one of:'
    print '\n'.join('\t' + x for x in sorted(site_patterns + venv_patterns))
    exit(1)


new_sites = [os.path.abspath(x) for x in new_sites]
new_venvs = [os.path.abspath(x) for x in new_venvs]


if opts.list_sites:
    print ':'.join(new_sites + [expand_venv(x) for x in new_venvs])
    exit(0)


if not opts.no_site:

    # Construct the new $PATH by comparing items in the existing $PATH
    # to the potential bases that we are extending from. If they come from
    # one of the bases, then try grafting it onto each of the new sites

    path_bases = opts.bases[:] or [
        os.environ.get('KS_TOOLS'),
        os.environ.get('VIRTUAL_ENV'),
        sys.prefix,
        sys.exec_prefix,
    ]
    path_bases = [os.path.abspath(x) for x in path_bases if x is not None]
    path_bases = unique(path_bases)

    new_path = []

    for dir_name in os.environ['PATH'].split(':'):
        dir_path = os.path.abspath(dir_name)
        
        for base in path_bases:

            # If this directory is within the main tools, add a site specific version
            # if it exists there too.
            if dir_path.startswith(base):
                relative_dir = os.path.relpath(dir_path, base)
                for site in new_sites:
                    site_specific_dir = os.path.join(site, relative_dir)
                    if os.path.exists(site_specific_dir):
                        new_path.append(site_specific_dir)
        
        new_path.append(dir_name)
    
    if ':'.join(new_path) != os.environ['PATH']:
        environ['PATH'] = ':'.join(unique(new_path))

    # Append on the existing sites, and make everything absolute.
    environ['KS_PYTHON_SITES'] = ':'.join(new_sites + environ_list('KS_PYTHON_SITES'))
    environ['KS_PYTHON_VENVS'] = ':'.join(new_venvs + environ_list('KS_PYTHON_VENVS'))


# Print out the changes to the environment.
if opts.export:
    for k, v in sorted(environ.iteritems()):
        print "export %s='%s'" % (k, v.replace("'", "'\\''"))
    exit()


if not args:
    optparser.print_usage()
    exit(1)


# Execute the requested command.
os.execvpe(args[0], args, environ)
    
# DOES NOT CONTINUE.
