#!/usr/bin/env python
"""Executes the given command with a modified path and KS_SITES.

E.g.:

    dev python -> Runs standard Python but imports from local key_tools.
    dev maya2011 -> Runs Maya2011 but with the local key_tools.

This still relies upon whichever sitecustomize that is within the PYTHONPATH to
bootstrap the Python sys.path with KS_SITES. This script still depends
upon the PATH to contain directories within the production tools in order to
hook them.

"""


import itertools
import os
import optparse
import pwd
import re
import sys


from sitetools.utils import unique_list, get_environ_list, expand_user
from sitetools.sites import Site


unique_sites = lambda ss: unique_list(ss, key=lambda s: s.python_path)


optparser = optparse.OptionParser(
    usage="usage: %prog [options] command [argument ...]"
)
optparser.add_option(
    '-e', '--export',
    dest="export", action="store_true", default=False,
    help="print the changes to the environment",
)
optparser.add_option(
    '-n', '--no-site',
    dest='no_site', action='store_true', default=False,
    help='do not modify the python path',
)
optparser.add_option(
    '-s', '--site',
    dest="sites", action="append", default=[],
    help="directory to use as the development $KS_TOOLS",
)
optparser.add_option(
    '-b', '--base',
    dest='bases', action='append', default=[],
    help='directories that if on the $PATH should be transformed into new sites',
)
optparser.add_option(
    '-u', '--user',
    dest="users", action="append",
    help="user whose dev environment to inherit; overriden by --site",
)
optparser.add_option(
    '--list-sites',
    dest="list_sites", action="store_true", default=False,
    help="list the development environments we would have used (colon delimited)"
)
optparser.add_option(
    '--bootstrap',
    dest="bootstrap", action="store_true", default=False,
    help="bootstrap a previous environment from $KS_DEV_ARGS",
)
optparser.add_option(
    '-v', '--verbose',
    dest="verbose", action="count",
    help="request verbose behaviour from scripts; sets $KS_VERBOSE; twice for very verbose",
)
optparser.add_option(
    '-l', '--log',
    dest='log_levels', action="append",
    help="set Python logging levels for modules; e.g.: 'sgfs:DEBUG' or ':INFO'",
)
optparser.disable_interspersed_args()
opts, args = optparser.parse_args()


if opts.bootstrap:
    opts, _ = optparser.parse_args([x for x in os.environ.get('KS_DEV_ARGS', '').split() if x])


# Should we inherit, or start a clean environment?
if opts.export:
    environ = {}
else:
    environ = os.environ.copy()


# Store the original flags as provided so that --bootstrap can pick it back up.
# Can't just use -len(args) because -0 won't do what we want.
bootstrap = sys.argv[1:len(sys.argv) - len(args)]
bootstrap = os.environ.get('KS_DEV_ARGS', '').split() + bootstrap
environ['KS_DEV_ARGS'] = ' '.join(x for x in bootstrap if x and x not in ('-e', '--export', '-b', '--bootstrap'))


# Set the debug flag.
if opts.verbose:
    environ['KS_VERBOSE'] = str(opts.verbose)


# Pass the logging levels on to sitecustomize.
if opts.log_levels:
    environ['KS_LOG_LEVELS'] = ','.join(x.strip() for x in opts.log_levels)


site_patterns = os.environ.get('KS_DEV_SITES', '~/fi/dev:~/fi/dev/venv/bin/python:~/dev:~/dev/venv/bin/python').split(':')

# Determine which new sites to add, and go exploring if there wasn't
# anything explicit.
new_sites = []
for site_path in opts.sites:
    try:
        new_sites.append(Site(site_path))
    except Exception as e:
        print e
        exit(1)

if not new_sites:
    for pattern in site_patterns:
        for user in opts.users or [None]:
            site_path = expand_user(pattern, user)
            try:
                site = Site(site_path)
            except (OSError, ValueError) as e:
                pass
            new_sites.append(site)


# Make sure that a development environment exists.
if not new_sites and not opts.no_site:
    print 'Could not find suitable development directory. Please make one of:'
    print '\n'.join('\t' + x for x in sorted(site_patterns))
    exit(1)


if opts.list_sites:
    print ':'.join(str(s) for s in unique_sites(new_sites))
    exit(0)


# Add ourselves to the list of sites so that if a transition is made to
# another Python venv we will still have our site-packages.
new_sites.append(Site(sys.executable))
new_sites = unique_sites(new_sites)


if not opts.no_site:

    new_path = []

    # Add bins from any venv sites.
    for site in new_sites:
        if site.bin_path is not None:
            new_path.append(site.bin_path)

    # Add to the new $PATH by comparing items in the existing $PATH
    # to the potential bases that we are extending from. If they come from
    # one of the bases, then try grafting it onto each of the new sites

    path_bases = opts.bases[:] or [
        os.environ.get('KS_TOOLS'),
        os.environ.get('VIRTUAL_ENV'),
        sys.prefix,
        sys.exec_prefix,
    ]
    path_bases = [os.path.abspath(x) for x in path_bases if x is not None]
    path_bases = unique_list(path_bases)

    for dir_name in os.environ['PATH'].split(':'):
        dir_path = os.path.abspath(dir_name)
        
        for base in path_bases:

            # If this directory is within the main tools, add a site specific version
            # if it exists there too.
            if dir_path.startswith(base):
                relative_dir = os.path.relpath(dir_path, base)
                for site in new_sites:
                    site_specific_dir = os.path.join(site.path, relative_dir)
                    if os.path.exists(site_specific_dir):
                        new_path.append(site_specific_dir)
        
        new_path.append(dir_name)
    
    if ':'.join(new_path) != os.environ['PATH']:
        environ['PATH'] = ':'.join(unique_list(new_path))

    # Append on the existing sites, and make everything absolute.
    environ['KS_SITES'] = ':'.join([str(s) for s in new_sites] + get_environ_list('KS_SITES'))

    # Hook for the next venv.
    py_path = get_environ_list('PYTHON_PATH')
    py_path = [x for x in py_path if not (
        os.path.basename(x) == 'venv_hook' and
        os.path.exists(os.path.join(x, 'sitecustomize.py'))
    )]
    py_path.insert(0, os.path.abspath(os.path.join(__file__, '..', '..', 'venv_hook')))
    environ['PYTHONPATH'] = ':'.join(py_path)


# Print out the changes to the environment.
if opts.export:
    for k, v in sorted(environ.iteritems()):
        print "export %s='%s'" % (k, v.replace("'", "'\\''"))
    exit()


if not args:
    optparser.print_usage()
    exit(1)


# Execute the requested command.
os.execvpe(args[0], args, environ)
    
# DOES NOT CONTINUE.
